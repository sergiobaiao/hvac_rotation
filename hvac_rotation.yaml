blueprint:
  name: Rotate & Backup HVAC Controller v2
  description: >
    Rotate daily between two HVAC units and hold room between a target
    temperature. If it overheats, it automatically kicks in the secondary
    unit until it cools back down.
  domain: automation
  input:
    primary_climate:
      name: Primary HVAC
      selector:
        entity:
          domain: climate
    backup_climate:
      name: Backup HVAC
      selector:
        entity:
          domain: climate
    temperature_sensor:
      name: Room Temperature Sensor
      selector:
        entity:
          domain: sensor
    rotation_helper:
      name: Rotation Helper (Input Boolean)
      description: >
        Create an input_boolean beforehand; this automation toggles it
        daily to decide which HVAC is “primary” that day.
      selector:
        entity:
          domain: input_boolean
    rotate_time:
      name: Daily rotation time
      default: "00:00:00"
      selector:
        time: {}
    target_temp:
      name: Target (mid‑point) temperature
      default: 21
      selector:
        number:
          unit_of_measurement: "°C"
          min: 5
          max: 30
          step: 0.5
    high_temp:
      name: High threshold
      default: 23
      selector:
        number:
          unit_of_measurement: "°C"
          min: 5
          max: 40
          step: 0.5
    low_temp:
      name: Low threshold
      default: 20
      selector:
        number:
          unit_of_measurement: "°C"
          min: 5
          max: 30
          step: 0.5

trigger:
  - platform: time
    at: !input rotate_time
    id: rotate
  - platform: numeric_state
    entity_id: !input temperature_sensor
    above: !input high_temp
    id: temp_high
  - platform: numeric_state
    entity_id: !input temperature_sensor
    below: !input low_temp
    id: temp_low

action:
  # 1) DAILY ROTATION
  - choose:
      - conditions:
          - condition: trigger
            id: rotate
        sequence:
          - service: input_boolean.toggle
            target:
              entity_id: !input rotation_helper

          # if helper is OFF → primary = primary_climate, backup = backup_climate
          - choose:
              - conditions:
                  - condition: state
                    entity_id: !input rotation_helper
                    state: "off"
                sequence:
                  - service: climate.set_hvac_mode
                    target: { entity_id: !input primary_climate }
                    data: { hvac_mode: cool }
                  - service: climate.set_temperature
                    target: { entity_id: !input primary_climate }
                    data: { temperature: !input target_temp }
                  - service: climate.set_hvac_mode
                    target: { entity_id: !input backup_climate }
                    data: { hvac_mode: "off" }

              # if helper is ON → primary = backup_climate, backup = primary_climate
              - conditions:
                  - condition: state
                    entity_id: !input rotation_helper
                    state: "on"
                sequence:
                  - service: climate.set_hvac_mode
                    target: { entity_id: !input backup_climate }
                    data: { hvac_mode: cool }
                  - service: climate.set_temperature
                    target: { entity_id: !input backup_climate }
                    data: { temperature: !input target_temp }
                  - service: climate.set_hvac_mode
                    target: { entity_id: !input primary_climate }
                    data: { hvac_mode: "off" }

  # 2) TOO HOT → TURN ON SECONDARY
  - choose:
      - conditions:
          - condition: trigger
            id: temp_high
          - condition: state
            entity_id: !input rotation_helper
            state: "off"
        sequence:
          - service: climate.set_hvac_mode
            target: { entity_id: !input backup_climate }
            data: { hvac_mode: cool }
          - service: climate.set_temperature
            target: { entity_id: !input backup_climate }
            data: { temperature: !input low_temp }

      - conditions:
          - condition: trigger
            id: temp_high
          - condition: state
            entity_id: !input rotation_helper
            state: "on"
        sequence:
          - service: climate.set_hvac_mode
            target: { entity_id: !input primary_climate }
            data: { hvac_mode: cool }
          - service: climate.set_temperature
            target: { entity_id: !input primary_climate }
            data: { temperature: !input low_temp }

  # 3) COOLED → TURN OFF SECONDARY
  - choose:
      - conditions:
          - condition: trigger
            id: temp_low
          - condition: state
            entity_id: !input rotation_helper
            state: "off"
        sequence:
          - service: climate.set_hvac_mode
            target: { entity_id: !input backup_climate }
            data: { hvac_mode: "off" }

      - conditions:
          - condition: trigger
            id: temp_low
          - condition: state
            entity_id: !input rotation_helper
            state: "on"
        sequence:
          - service: climate.set_hvac_mode
            target: { entity_id: !input primary_climate }
            data: { hvac_mode: "off" }
